// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id() @default(uuid())
  username String @unique
  password String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Post      Post[]
  Like      Like[]
  Comment   Comment[]
}

model Post {
  id            String    @id() @default(uuid())
  title         String
  content       String
  authorId      String
  // favouriteId String
  author        User      @relation(fields: [authorId], references: [id])
  // Favourite   Favourite? @relation(fields: [favouriteId], references: [id])
  numberOfLikes Int       @default(0)
  likes         Like[]
  comments      Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)
}

model Like {
  id       String @id() @default(uuid())
  authorId String
  postId   String
  author   User   @relation(fields: [authorId], references: [id])
  post     Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id       String @id() @default(uuid())
  text     String
  authorId String
  postId   String
  author   User   @relation(fields: [authorId], references: [id])
  post     Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)
}

// model Favourite {
//   id String @id() @default(uuid())

//   posts Post[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
